import React, { useState, useEffect } from 'react';

function DataFetchingComponent() {
  // State management
  const [data, setData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  // Fetch data function
  const fetchData = async () => {
    setIsLoading(true);
    setError(null); // Reset error state before new fetch

    try {
      const response = await fetch('https://api.example.com/data', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          // Add any necessary headers like Authorization if needed
        },
      });

      // Check if response is ok (status in the range 200-299)
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      setData(result);

    } catch (err) {
      // Handle different types of errors
      if (err.name === 'TypeError') {
        setError('Network error occurred. Please check your connection.');
      } else {
        setError(err.message || 'An unexpected error occurred');
      }
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch data on component mount
  useEffect(() => {
    fetchData();
  }, []);

  // POST request example
  const submitData = async (formData) => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('https://api.example.com/data', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      setData(result);
      return result;

    } catch (err) {
      setError(err.message);
      throw err; // Re-throw if you want to handle it further up the chain
    } finally {
      setIsLoading(false);
    }
  };

  // Render logic
  if (isLoading) {
    return (
      <div className="loading">
        <p>Loading...</p>
        {/* Could add a spinner component here */}
      </div>
    );
  }

  if (error) {
    return (
      <div className="error">
        <p>Error: {error}</p>
        <button onClick={fetchData}>Retry</button>
      </div>
    );
  }

  return (
    <div className="data-container">
      {data ? (
        <>
          <h1>Data Loaded</h1>
          <pre>{JSON.stringify(data, null, 2)}</pre>
          <button onClick={fetchData}>Refresh</button>
        </>
      ) : (
        <p>No data available</p>
      )}
    </div>
  );
}

// Example usage with a form
function FormExample() {
  const [formData, setFormData] = useState({ name: '', email: '' });
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const result = await submitData(formData);
      console.log('Success:', result);
    } catch (err) {
      console.error('Form submission failed:', err);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={formData.name}
        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
        placeholder="Name"
      />
      <input
        type="email"
        value={formData.email}
        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
        placeholder="Email"
      />
      <button type="submit" disabled={isLoading}>
        {isLoading ? 'Submitting...' : 'Submit'}
      </button>
    </form>
  );
}

export default DataFetchingComponent;
