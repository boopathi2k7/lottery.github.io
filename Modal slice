// This is a complete example showing how to set API response data to modal input fields using Redux

// Step 1: Set up your Redux store

// src/features/userSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

// Async thunk for API call
export const fetchUserData = createAsyncThunk(
  'user/fetchUserData',
  async (userId, { rejectWithValue }) => {
    try {
      // In a real app, you would use the userId parameter in your API URL
      const response = await fetch('https://jsonplaceholder.typicode.com/users/1');
      if (!response.ok) throw new Error('Network response was not ok');
      return await response.json();
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

const userSlice = createSlice({
  name: 'user',
  initialState: {
    userData: {
      name: '',
      email: '',
      phone: '',
      address: {
        street: '',
        city: '',
        zipcode: ''
      },
      company: {
        name: ''
      }
    },
    loading: false,
    error: null,
  },
  reducers: {
    updateField: (state, action) => {
      const { field, value } = action.payload;
      
      // Handle nested fields using dot notation (e.g., "address.street")
      if (field.includes('.')) {
        const [parent, child] = field.split('.');
        state.userData[parent][child] = value;
      } else {
        state.userData[field] = value;
      }
    },
    resetForm: (state) => {
      state.userData = {
        name: '',
        email: '',
        phone: '',
        address: {
          street: '',
          city: '',
          zipcode: ''
        },
        company: {
          name: ''
        }
      };
    }
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchUserData.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchUserData.fulfilled, (state, action) => {
        state.loading = false;
        // Map API response to our form structure
        state.userData = {
          name: action.payload.name || '',
          email: action.payload.email || '',
          phone: action.payload.phone || '',
          address: {
            street: action.payload.address?.street || '',
            city: action.payload.address?.city || '',
            zipcode: action.payload.address?.zipcode || ''
          },
          company: {
            name: action.payload.company?.name || ''
          }
        };
      })
      .addCase(fetchUserData.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });
  },
});

export const { updateField, resetForm } = userSlice.actions;
export default userSlice.reducer;

// Step 2: Configure your Redux store

// src/app/store.js
import { configureStore } from '@reduxjs/toolkit';
import userReducer from '../features/userSlice';

export const store = configureStore({
  reducer: {
    user: userReducer,
  },
});

// Step 3: Create a Modal Component

// src/components/UserModal.js
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { fetchUserData, updateField, resetForm } from '../features/userSlice';
import './UserModal.css';

const UserModal = ({ isOpen, onClose, userId = 1 }) => {
  const dispatch = useDispatch();
  const { userData, loading, error } = useSelector((state) => state.user);

  useEffect(() => {
    if (isOpen) {
      // Fetch user data when modal opens
      dispatch(fetchUserData(userId));
    } else {
      // Reset form when modal closes
      dispatch(resetForm());
    }
  }, [isOpen, userId, dispatch]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    dispatch(updateField({ field: name, value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Saving user data:', userData);
    // Here you would typically dispatch an action to save the data
    // dispatch(saveUserData(userData));
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-container">
        <div className="modal-header">
          <h2>User Information</h2>
          <button className="close-button" onClick={onClose}>Ã—</button>
        </div>
        
        {loading && <div className="loading">Loading user data...</div>}
        {error && <div className="error">Error: {error}</div>}
        
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="name">Name:</label>
            <input 
              type="text" 
              id="name" 
              name="name"
              value={userData.name} 
              onChange={handleInputChange} 
              disabled={loading}
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="email">Email:</label>
            <input 
              type="email" 
              id="email" 
              name="email"
              value={userData.email} 
              onChange={handleInputChange} 
              disabled={loading}
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="phone">Phone:</label>
            <input 
              type="tel" 
              id="phone" 
              name="phone"
              value={userData.phone} 
              onChange={handleInputChange} 
              disabled={loading}
            />
          </div>
          
          <div className="form-section">
            <h3>Address</h3>
            
            <div className="form-group">
              <label htmlFor="address.street">Street:</label>
              <input 
                type="text" 
                id="address.street" 
                name="address.street"
                value={userData.address.street} 
                onChange={handleInputChange} 
                disabled={loading}
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="address.city">City:</label>
              <input 
                type="text" 
                id="address.city" 
                name="address.city"
                value={userData.address.city} 
                onChange={handleInputChange} 
                disabled={loading}
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="address.zipcode">Zip Code:</label>
              <input 
                type="text" 
                id="address.zipcode" 
                name="address.zipcode"
                value={userData.address.zipcode} 
                onChange={handleInputChange} 
                disabled={loading}
              />
            </div>
          </div>
          
          <div className="form-section">
            <h3>Company</h3>
            <div className="form-group">
              <label htmlFor="company.name">Company Name:</label>
              <input 
                type="text" 
                id="company.name" 
                name="company.name"
                value={userData.company.name} 
                onChange={handleInputChange} 
                disabled={loading}
              />
            </div>
          </div>
          
          <div className="modal-actions">
            <button type="button" onClick={onClose} disabled={loading}>Cancel</button>
            <button type="submit" disabled={loading}>Save Changes</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default UserModal;

// src/components/UserModal.css
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.modal-container {
  background-color: white;
  border-radius: 8px;
  width: 600px;
  max-width: 90%;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 24px;
  border-bottom: 1px solid #eee;
}

.modal-header h2 {
  margin: 0;
  font-size: 1.5rem;
}

.close-button {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #666;
}

.close-button:hover {
  color: #333;
}

.loading, .error {
  padding: 16px 24px;
  text-align: center;
}

.error {
  color: #d32f2f;
}

form {
  padding: 16px 24px;
}

.form-group {
  margin-bottom: 16px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
}

.form-group input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
}

.form-group input:focus {
  border-color: #4a90e2;
  outline: none;
  box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
}

.form-section {
  margin: 24px 0;
  padding-top: 16px;
  border-top: 1px solid #eee;
}

.form-section h3 {
  margin-top: 0;
  margin-bottom: 16px;
  font-size: 1.2rem;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  margin-top: 24px;
}

.modal-actions button {
  padding: 10px 20px;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
}

.modal-actions button[type="button"] {
  background-color: #f5f5f5;
  border: 1px solid #ddd;
  color: #333;
}

.modal-actions button[type="submit"] {
  background-color: #4a90e2;
  border: 1px solid #3a80d2;
  color: white;
}

.modal-actions button:hover {
  opacity: 0.9;
}

.modal-actions button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

// Step 4: Use the Modal in App Component

// src/App.js
import React, { useState } from 'react';
import { Provider } from 'react-redux';
import { store } from './app/store';
import UserModal from './components/UserModal';
import './App.css';

function App() {
  const [isModalOpen, setIsModalOpen] = useState(false);

  const openModal = () => setIsModalOpen(true);
  const closeModal = () => setIsModalOpen(false);

  return (
    <Provider store={store}>
      <div className="app">
        <header className="app-header">
          <h1>React Redux Modal Example</h1>
        </header>
        <main className="app-main">
          <div className="card">
            <h2>User Management</h2>
            <p>Click the button below to open a modal with user information fetched from an API.</p>
            <button className="primary-button" onClick={openModal}>
              Edit User Data
            </button>
          </div>
          
          <UserModal 
            isOpen={isModalOpen} 
            onClose={closeModal} 
            userId={1} 
          />
        </main>
      </div>
    </Provider>
  );
}

export default App;

// src/App.css
.app {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  line-height: 1.5;
  color: #333;
}

.app-header {
  background-color: #4a90e2;
  color: white;
  padding: 16px 32px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.app-main {
  max-width: 1200px;
  margin: 0 auto;
  padding: 32px;
}

.card {
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  padding: 24px;
  max-width: 600px;
  margin: 0 auto;
}

.primary-button {
  background-color: #4a90e2;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 12px 24px;
  font-size: 1rem;
  cursor: pointer;
  margin-top: 16px;
}

.primary-button:hover {
  background-color: #3a80d2;
}

// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import './index.css';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

// src/index.css
* {
  box-sizing: border-box;
}

body {
  margin: 0;
  background-color: #f5f7fa;
}
