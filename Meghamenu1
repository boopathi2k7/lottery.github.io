import React, { useState, useRef, useEffect } from 'react';

const MegaMenu = () => {
  // Sample menu data structure
  const menuData = [
    {
      id: 'products',
      label: 'Products',
      submenu: [
        {
          title: 'Software',
          items: [
            { name: 'Analytics Platform', url: '/analytics' },
            { name: 'CRM Solutions', url: '/crm' },
            { name: 'Enterprise Software', url: '/enterprise' }
          ]
        },
        {
          title: 'Hardware',
          items: [
            { name: 'Laptops', url: '/laptops' },
            { name: 'Tablets', url: '/tablets' },
            { name: 'Mobile Devices', url: '/mobile' }
          ]
        },
        {
          title: 'Services',
          items: [
            { name: 'Cloud Solutions', url: '/cloud' },
            { name: 'Consulting', url: '/consulting' },
            { name: 'Support', url: '/support' }
          ]
        }
      ]
    },
    {
      id: 'solutions',
      label: 'Solutions',
      submenu: [
        {
          title: 'By Industry',
          items: [
            { name: 'Healthcare', url: '/healthcare' },
            { name: 'Finance', url: '/finance' },
            { name: 'Education', url: '/education' }
          ]
        },
        {
          title: 'By Business Size',
          items: [
            { name: 'Enterprise', url: '/enterprise-solutions' },
            { name: 'Small Business', url: '/small-business' },
            { name: 'Startups', url: '/startups' }
          ]
        }
      ]
    },
    {
      id: 'resources',
      label: 'Resources',
      submenu: [
        {
          title: 'Learning',
          items: [
            { name: 'Documentation', url: '/docs' },
            { name: 'Tutorials', url: '/tutorials' },
            { name: 'Webinars', url: '/webinars' }
          ]
        },
        {
          title: 'Community',
          items: [
            { name: 'Forums', url: '/forums' },
            { name: 'Events', url: '/events' },
            { name: 'Blog', url: '/blog' }
          ]
        }
      ]
    },
    {
      id: 'about',
      label: 'About',
      url: '/about'
    },
    {
      id: 'contact',
      label: 'Contact',
      url: '/contact'
    }
  ];

  const [activeMenu, setActiveMenu] = useState(null);
  const [focusedItem, setFocusedItem] = useState(null);
  const menuRefs = useRef({});
  const timeoutRef = useRef(null);

  // Handle keyboard navigation
  const handleKeyDown = (e, menuId, itemIndex, columnIndex, rowIndex) => {
    const currentMenu = menuData.find(item => item.id === menuId);
    
    switch (e.key) {
      case 'Escape':
        setActiveMenu(null);
        if (menuRefs.current[menuId]) {
          menuRefs.current[menuId].focus();
        }
        break;
      
      case 'ArrowDown':
        e.preventDefault();
        if (activeMenu && currentMenu?.submenu) {
          if (rowIndex === undefined) {
            // Focus on first item of first column
            setFocusedItem({menuId, columnIndex: 0, rowIndex: 0});
          } else if (currentMenu.submenu[columnIndex] && 
                     rowIndex < currentMenu.submenu[columnIndex].items.length - 1) {
            // Move to next item in same column
            setFocusedItem({menuId, columnIndex, rowIndex: rowIndex + 1});
          }
        } else if (!activeMenu) {
          // Open submenu on arrow down from main menu
          if (currentMenu?.submenu) {
            setActiveMenu(menuId);
            setFocusedItem({menuId, columnIndex: 0, rowIndex: 0});
          }
        }
        break;
      
      case 'ArrowUp':
        e.preventDefault();
        if (activeMenu && rowIndex !== undefined && rowIndex > 0) {
          // Move to previous item in same column
          setFocusedItem({menuId, columnIndex, rowIndex: rowIndex - 1});
        } else if (activeMenu && rowIndex === 0) {
          // Move focus back to top-level menu item
          setActiveMenu(null);
          if (menuRefs.current[menuId]) {
            menuRefs.current[menuId].focus();
          }
        }
        break;
      
      case 'ArrowRight':
        e.preventDefault();
        if (activeMenu && columnIndex !== undefined) {
          if (currentMenu?.submenu && columnIndex < currentMenu.submenu.length - 1) {
            // Move to same row in next column
            const nextRowIndex = Math.min(
              rowIndex, 
              currentMenu.submenu[columnIndex + 1].items.length - 1
            );
            setFocusedItem({menuId, columnIndex: columnIndex + 1, rowIndex: nextRowIndex});
          }
        } else {
          // Move to next top-level menu item
          const currentIndex = menuData.findIndex(item => item.id === menuId);
          if (currentIndex < menuData.length - 1) {
            const nextMenu = menuData[currentIndex + 1];
            if (menuRefs.current[nextMenu.id]) {
              menuRefs.current[nextMenu.id].focus();
            }
          }
        }
        break;
      
      case 'ArrowLeft':
        e.preventDefault();
        if (activeMenu && columnIndex !== undefined && columnIndex > 0) {
          // Move to same row in previous column
          const prevRowIndex = Math.min(
            rowIndex, 
            currentMenu.submenu[columnIndex - 1].items.length - 1
          );
          setFocusedItem({menuId, columnIndex: columnIndex - 1, rowIndex: prevRowIndex});
        } else {
          // Move to previous top-level menu item
          const currentIndex = menuData.findIndex(item => item.id === menuId);
          if (currentIndex > 0) {
            const prevMenu = menuData[currentIndex - 1];
            if (menuRefs.current[prevMenu.id]) {
              menuRefs.current[prevMenu.id].focus();
            }
          }
        }
        break;
      
      case 'Enter':
      case ' ':
        e.preventDefault();
        if (!activeMenu && currentMenu?.submenu) {
          setActiveMenu(menuId);
          setFocusedItem({menuId, columnIndex: 0, rowIndex: 0});
        }
        break;
        
      case 'Tab':
        setActiveMenu(null);
        break;
        
      default:
        break;
    }
  };

  // Focus on the appropriate element when focusedItem changes
  useEffect(() => {
    if (focusedItem) {
      const { menuId, columnIndex, rowIndex } = focusedItem;
      const itemId = `${menuId}-col${columnIndex}-item${rowIndex}`;
      const element = document.getElementById(itemId);
      if (element) {
        element.focus();
      }
    }
  }, [focusedItem]);

  // Close menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (activeMenu && !e.target.closest('.mega-menu')) {
        setActiveMenu(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [activeMenu]);

  // Handle delayed menu opening/closing for better UX
  const handleMenuEnter = (menuId) => {
    clearTimeout(timeoutRef.current);
    timeoutRef.current = setTimeout(() => {
      setActiveMenu(menuId);
    }, 200);
  };

  const handleMenuLeave = () => {
    clearTimeout(timeoutRef.current);
    timeoutRef.current = setTimeout(() => {
      setActiveMenu(null);
    }, 300);
  };

  // Clean up timeout on unmount
  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  return (
    <nav 
      className="mega-menu bg-gray-800 text-white" 
      role="navigation" 
      aria-label="Main Navigation"
    >
      <div className="max-w-6xl mx-auto">
        <ul className="flex items-center space-x-1 p-0 m-0 list-none">
          {menuData.map((menuItem) => (
            <li 
              key={menuItem.id} 
              className="relative"
              onMouseEnter={() => handleMenuEnter(menuItem.id)}
              onMouseLeave={handleMenuLeave}
            >
              {menuItem.submenu ? (
                <>
                  <button
                    id={`menu-${menuItem.id}`}
                    ref={el => menuRefs.current[menuItem.id] = el}
                    className={`px-4 py-3 block font-medium hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white ${
                      activeMenu === menuItem.id ? 'bg-gray-700' : ''
                    }`}
                    aria-expanded={activeMenu === menuItem.id}
                    aria-haspopup="true"
                    aria-controls={`submenu-${menuItem.id}`}
                    onClick={() => setActiveMenu(activeMenu === menuItem.id ? null : menuItem.id)}
                    onKeyDown={(e) => handleKeyDown(e, menuItem.id)}
                  >
                    {menuItem.label}
                    <span aria-hidden="true" className="ml-1">â–¼</span>
                  </button>
                  {activeMenu === menuItem.id && (
                    <div
                      id={`submenu-${menuItem.id}`}
                      className="absolute left-0 mt-1 bg-white text-gray-800 shadow-lg rounded-md p-4 min-w-max z-10"
                      onMouseEnter={() => clearTimeout(timeoutRef.current)}
                      onMouseLeave={handleMenuLeave}
                      role="menu"
                      aria-labelledby={`menu-${menuItem.id}`}
                    >
                      <div className="flex gap-8">
                        {menuItem.submenu.map((column, columnIndex) => (
                          <div key={`${menuItem.id}-col-${columnIndex}`} className="min-w-40">
                            <h3 id={`${menuItem.id}-heading-${columnIndex}`} className="text-sm font-bold uppercase mb-2 text-gray-500">
                              {column.title}
                            </h3>
                            <ul 
                              className="space-y-2 p-0 m-0 list-none" 
                              aria-labelledby={`${menuItem.id}-heading-${columnIndex}`}
                            >
                              {column.items.map((item, rowIndex) => (
                                <li key={`${menuItem.id}-${columnIndex}-${rowIndex}`}>
                                  <a
                                    id={`${menuItem.id}-col${columnIndex}-item${rowIndex}`}
                                    href={item.url}
                                    className="block px-2 py-1 text-gray-700 hover:bg-gray-100 hover:text-gray-900 rounded focus:outline-none focus:bg-gray-100 focus:text-gray-900"
                                    role="menuitem"
                                    tabIndex={focusedItem && 
                                      focusedItem.menuId === menuItem.id && 
                                      focusedItem.columnIndex === columnIndex && 
                                      focusedItem.rowIndex === rowIndex ? 0 : -1}
                                    onKeyDown={(e) => handleKeyDown(e, menuItem.id, columnIndex, rowIndex)}
                                  >
                                    {item.name}
                                  </a>
                                </li>
                              ))}
                            </ul>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </>
              ) : (
                <a
                  ref={el => menuRefs.current[menuItem.id] = el}
                  href={menuItem.url}
                  className="px-4 py-3 block font-medium hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
                  onKeyDown={(e) => handleKeyDown(e, menuItem.id)}
                >
                  {menuItem.label}
                </a>
              )}
            </li>
          ))}
        </ul>
      </div>
    </nav>
  );
};

export default MegaMenu;
