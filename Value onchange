// 1. Redux slice for managing user data
// userSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

// Async thunk to fetch user data from API
export const fetchUserData = createAsyncThunk(
  'user/fetchUserData',
  async (userId) => {
    const response = await fetch(`https://api.example.com/users/${userId}`);
    const data = await response.json();
    return data;
  }
);

const userSlice = createSlice({
  name: 'user',
  initialState: {
    userData: null,
    loading: false,
    error: null,
  },
  reducers: {
    // You can add additional reducers for updating the form data locally
    updateFormField: (state, action) => {
      const { field, value } = action.payload;
      if (state.userData) {
        state.userData = {
          ...state.userData,
          [field]: value
        };
      }
    }
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchUserData.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchUserData.fulfilled, (state, action) => {
        state.loading = false;
        state.userData = action.payload;
      })
      .addCase(fetchUserData.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

export const { updateFormField } = userSlice.actions;
export default userSlice.reducer;

// 2. Configure the Redux store
// store.js
import { configureStore } from '@reduxjs/toolkit';
import userReducer from './userSlice';

export const store = configureStore({
  reducer: {
    user: userReducer,
  },
});

// 3. Create a form component that uses the Redux data
// UserForm.js
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchUserData, updateFormField } from './userSlice';

const UserForm = ({ userId }) => {
  const dispatch = useDispatch();
  const { userData, loading, error } = useSelector((state) => state.user);

  // Fetch user data when component mounts or userId changes
  useEffect(() => {
    if (userId) {
      dispatch(fetchUserData(userId));
    }
  }, [userId, dispatch]);

  // Handle input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    dispatch(updateFormField({ field: name, value }));
  };

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Form submitted with data:', userData);
    // You can dispatch another action here to save the updated data
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!userData) return <div>No user data available</div>;

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="name">Name:</label>
        <input
          type="text"
          id="name"
          name="name"
          value={userData.name || ''}
          onChange={handleInputChange}
        />
      </div>
      
      <div>
        <label htmlFor="email">Email:</label>
        <input
          type="email"
          id="email"
          name="email"
          value={userData.email || ''}
          onChange={handleInputChange}
        />
      </div>
      
      <div>
        <label htmlFor="phone">Phone:</label>
        <input
          type="tel"
          id="phone"
          name="phone"
          value={userData.phone || ''}
          onChange={handleInputChange}
        />
      </div>
      
      <button type="submit">Save Changes</button>
    </form>
  );
};

export default UserForm;

// 4. Use the component in your app
// App.js
import React from 'react';
import { Provider } from 'react-redux';
import { store } from './store';
import UserForm from './UserForm';

function App() {
  return (
    <Provider store={store}>
      <div className="App">
        <h1>User Profile</h1>
        {/* Pass the user ID of the user you want to edit */}
        <UserForm userId="123" />
      </div>
    </Provider>
  );
}

export default App;
