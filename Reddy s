. Spring Boot Application (Full Code)

Step 1: Add Dependencies

Add the Redis dependency in pom.xml:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>


---

Step 2: Configure Redis Connection

Update application.yml:

spring:
  redis:
    host: localhost  # If running in Docker on local machine
    port: 6379

If Redis is running inside Docker Compose or another network, replace localhost with the container name or IP.


---

Step 3: Create a Redis Publisher

import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;

@Service
public class RedisMessagePublisher {
    
    private final StringRedisTemplate redisTemplate;

    public RedisMessagePublisher(StringRedisTemplate redisTemplate) {
        this.redisTemplate = redisTemplate;
    }

    public void publish(String channel, String message) {
        redisTemplate.convertAndSend(channel, message);
        System.out.println("Published: " + message);
    }
}


---

Step 4: Create a Redis Subscriber

import org.springframework.data.redis.connection.Message;
import org.springframework.data.redis.connection.MessageListener;
import org.springframework.stereotype.Component;

@Component
public class RedisMessageSubscriber implements MessageListener {

    @Override
    public void onMessage(Message message, byte[] pattern) {
        System.out.println("Received: " + message.toString());
    }
}


---

Step 5: Configure Redis Listener

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.listener.PatternTopic;
import org.springframework.data.redis.listener.RedisMessageListenerContainer;
import org.springframework.data.redis.listener.adapter.MessageListenerAdapter;

@Configuration
public class RedisConfig {

    @Bean
    public RedisMessageListenerContainer container(RedisConnectionFactory connectionFactory,
                                                   MessageListenerAdapter listenerAdapter) {
        RedisMessageListenerContainer container = new RedisMessageListenerContainer();
        container.setConnectionFactory(connectionFactory);
        container.addMessageListener(listenerAdapter, new PatternTopic("my-channel"));
        return container;
    }

    @Bean
    public MessageListenerAdapter listenerAdapter(RedisMessageSubscriber subscriber) {
        return new MessageListenerAdapter(subscriber);
    }
}


---

Step 6: Test with a REST API

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class RedisTestController {

    private final RedisMessagePublisher publisher;

    public RedisTestController(RedisMessagePublisher publisher) {
        this.publisher = publisher;
    }

    @GetMapping("/publish")
    public String publishMessage(@RequestParam String message) {
        publisher.publish("my-channel", message);
        return "Message published!";
    }
}


---

3. Running the Application

1. Start Redis in Docker:

docker run --name redis-container -p 6379:6379 -d redis


2. Run your Spring Boot application.


3. Test message publishing:

http://localhost:8080/publish?message=HelloRedis

You should see Published: HelloRedis in the logs.

The subscriber should print Received: HelloRedis.





---

4. (Optional) Using Docker Compose

If you want to run both Redis and your Spring Boot app in containers, create a docker-compose.yml:

version: '3.8'
services:
  redis:
    image: redis
    container_name: redis-container
    ports:
      - "6379:6379"

  app:
    build: .
    container_name: spring-redis-app
    depends_on:
      - redis
    environment:
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    ports:
      - "8080:8080"

Then, run:

docker-compose up -d


---

This setup ensures that your Spring Boot application connects to Redis running in a container. Let me know if you need further modifications!
