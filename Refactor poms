Sure! Here's the refactored code:

### `pom.xml`
```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>excel-upload</artifactId>
    <version>1.0-SNAPSHOT</version>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>5.2.3</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
    </dependencies>
</project>
```

### `application.properties`
```properties
spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.jdbc.batch_size=30
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
```

### `ExcelUploadController.java`
```java
@RestController
@RequestMapping("/upload")
public class ExcelUploadController {
    private final ExcelService excelService;
    public ExcelUploadController(ExcelService excelService) {
        this.excelService = excelService;
    }
    @PostMapping("/excel")
    public ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file) {
        excelService.processExcel(file);
        return ResponseEntity.ok("File processed successfully");
    }
}
```

### `ExcelService.java`
```java
@Service
public class ExcelService {
    @PersistenceContext
    private EntityManager entityManager;
    private final MapValRepository mapValRepository;
    private final ErrorLogRepository errorLogRepository;
    public ExcelService(MapValRepository mapValRepository, ErrorLogRepository errorLogRepository) {
        this.mapValRepository = mapValRepository;
        this.errorLogRepository = errorLogRepository;
    }

    public void processExcel(MultipartFile file) {
        try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {
            Sheet sheet = workbook.getSheetAt(0);
            List<ExcelDTO> records = new ArrayList<>();
            for (Row row : sheet) {
                if (row.getRowNum() == 0) continue;
                String userId = row.getCell(0).getStringCellValue();
                String mailCode = row.getCell(1).getStringCellValue();
                records.add(new ExcelDTO(userId, mailCode));
            }
            validateAndSave(records);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void validateAndSave(List<ExcelDTO> records) {
        Set<String> userIds = records.stream().map(ExcelDTO::getUserId).collect(Collectors.toSet());
        Set<String> mailCodes = records.stream().map(ExcelDTO::getMailCode).collect(Collectors.toSet());
        
        List<String> validUserIds = entityManager.createQuery("SELECT u.id FROM TbWrk u WHERE u.id IN :ids", String.class)
                .setParameter("ids", userIds).getResultList();
        List<String> validMailCodes = entityManager.createQuery("SELECT m.code FROM TbMailcode m WHERE m.code IN :codes", String.class)
                .setParameter("codes", mailCodes).getResultList();
        
        List<MapVal> validRecords = new ArrayList<>();
        List<ErrorLog> errorLogs = new ArrayList<>();
        
        for (ExcelDTO record : records) {
            if (!validUserIds.contains(record.getUserId()) || !validMailCodes.contains(record.getMailCode())) {
                errorLogs.add(new ErrorLog("Invalid Data", "Validation Error", LocalDateTime.now(), "Invalid UserId or MailCode"));
            } else {
                validRecords.add(new MapVal(record.getUserId(), record.getMailCode()));
            }
        }
        
        if (!errorLogs.isEmpty()) errorLogRepository.saveAll(errorLogs);
        if (!validRecords.isEmpty()) batchInsertOrUpdate(validRecords);
    }
    
    private void batchInsertOrUpdate(List<MapVal> records) {
        int batchSize = 30;
        for (int i = 0; i < records.size(); i++) {
            entityManager.merge(records.get(i));
            if (i % batchSize == 0) {
                entityManager.flush();
                entityManager.clear();
            }
        }
    }
}
```

### `ExcelDTO.java`
```java
public class ExcelDTO {
    private String userId;
    private String mailCode;
    public ExcelDTO(String userId, String mailCode) {
        this.userId = userId;
        this.mailCode = mailCode;
    }
    public String getUserId() { return userId; }
    public String getMailCode() { return mailCode; }
}
```

### `MapVal.java`
```java
@Entity
@Table(name = "map_val")
public class MapVal {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String userId;
    private String mailCode;
    public MapVal(String userId, String mailCode) {
        this.userId = userId;
        this.mailCode = mailCode;
    }
}
```

### `ErrorLog.java`
```java
@Entity
@Table(name = "error_log")
public class ErrorLog {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String errorName;
    private String errorType;
    private LocalDateTime timestamp;
    private String errorDetails;
    public ErrorLog(String errorName, String errorType, LocalDateTime timestamp, String errorDetails) {
        this.errorName = errorName;
        this.errorType = errorType;
        this.timestamp = timestamp;
        this.errorDetails = errorDetails;
    }
}
```

### `Repositories`
```java
@Repository
public interface MapValRepository extends JpaRepository<MapVal, Long> {}
@Repository
public interface ErrorLogRepository extends JpaRepository<ErrorLog, Long> {}
```

This refactored version ensures efficient validation using bulk queries instead of separate entity lookups. Let me know if you need further optimizations!
