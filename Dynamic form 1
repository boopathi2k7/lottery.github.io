import React, { useState } from 'react';

const DynamicFormGenerator = () => {
  // Sample JSON configuration for the form
  const formConfig = {
    title: "User Registration Form",
    fields: [
      {
        id: "firstName",
        type: "text",
        label: "First Name",
        placeholder: "Enter your first name",
        required: true,
        validation: {
          minLength: 2,
          maxLength: 50
        }
      },
      {
        id: "lastName",
        type: "text",
        label: "Last Name",
        placeholder: "Enter your last name",
        required: true,
        validation: {
          minLength: 2,
          maxLength: 50
        }
      },
      {
        id: "email",
        type: "email",
        label: "Email Address",
        placeholder: "Enter your email",
        required: true,
        validation: {
          pattern: "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$"
        }
      },
      {
        id: "age",
        type: "number",
        label: "Age",
        placeholder: "Enter your age",
        required: true,
        validation: {
          min: 18,
          max: 100
        }
      },
      {
        id: "gender",
        type: "select",
        label: "Gender",
        required: true,
        options: [
          { value: "", label: "Select Gender" },
          { value: "male", label: "Male" },
          { value: "female", label: "Female" },
          { value: "other", label: "Other" }
        ]
      },
      {
        id: "interests",
        type: "checkbox",
        label: "Interests",
        options: [
          { value: "sports", label: "Sports" },
          { value: "music", label: "Music" },
          { value: "reading", label: "Reading" },
          { value: "travel", label: "Travel" }
        ]
      },
      {
        id: "newsletter",
        type: "radio",
        label: "Subscribe to Newsletter?",
        options: [
          { value: "yes", label: "Yes" },
          { value: "no", label: "No" }
        ]
      },
      {
        id: "bio",
        type: "textarea",
        label: "Bio",
        placeholder: "Tell us about yourself",
        rows: 4,
        validation: {
          maxLength: 500
        }
      }
    ],
    submitButton: {
      text: "Submit Form",
      className: "bg-blue-500 hover:bg-blue-600 text-white"
    }
  };

  const [formData, setFormData] = useState({});
  const [errors, setErrors] = useState({});
  const [submitted, setSubmitted] = useState(false);

  // Validate individual field
  const validateField = (field, value) => {
    const validation = field.validation || {};
    let error = '';

    if (field.required && (!value || (Array.isArray(value) && value.length === 0))) {
      error = `${field.label} is required`;
    } else if (value) {
      if (validation.minLength && value.length < validation.minLength) {
        error = `${field.label} must be at least ${validation.minLength} characters`;
      } else if (validation.maxLength && value.length > validation.maxLength) {
        error = `${field.label} must be no more than ${validation.maxLength} characters`;
      } else if (validation.min && Number(value) < validation.min) {
        error = `${field.label} must be at least ${validation.min}`;
      } else if (validation.max && Number(value) > validation.max) {
        error = `${field.label} must be no more than ${validation.max}`;
      } else if (validation.pattern && !new RegExp(validation.pattern).test(value)) {
        error = `${field.label} format is invalid`;
      }
    }

    return error;
  };

  // Handle input changes
  const handleInputChange = (fieldId, value, fieldConfig) => {
    setFormData(prev => ({
      ...prev,
      [fieldId]: value
    }));

    // Clear error when user starts typing
    if (errors[fieldId]) {
      setErrors(prev => ({
        ...prev,
        [fieldId]: ''
      }));
    }
  };

  // Handle checkbox changes
  const handleCheckboxChange = (fieldId, optionValue, checked) => {
    setFormData(prev => {
      const currentValues = prev[fieldId] || [];
      if (checked) {
        return {
          ...prev,
          [fieldId]: [...currentValues, optionValue]
        };
      } else {
        return {
          ...prev,
          [fieldId]: currentValues.filter(val => val !== optionValue)
        };
      }
    });
  };

  // Validate entire form
  const validateForm = () => {
    const newErrors = {};
    
    formConfig.fields.forEach(field => {
      const value = formData[field.id];
      const error = validateField(field, value);
      if (error) {
        newErrors[field.id] = error;
      }
    });

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (validateForm()) {
      setSubmitted(true);
      console.log('Form submitted:', formData);
      // Here you would typically send the data to your API
    }
  };

  // Render different input types
  const renderField = (field) => {
    const value = formData[field.id] || '';
    const error = errors[field.id];

    const baseInputClasses = `w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
      error ? 'border-red-500' : 'border-gray-300'
    }`;

    switch (field.type) {
      case 'text':
      case 'email':
      case 'number':
        return (
          <div key={field.id} className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {field.label} {field.required && <span className="text-red-500">*</span>}
            </label>
            <input
              type={field.type}
              value={value}
              placeholder={field.placeholder}
              onChange={(e) => handleInputChange(field.id, e.target.value, field)}
              className={baseInputClasses}
            />
            {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
          </div>
        );

      case 'textarea':
        return (
          <div key={field.id} className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {field.label} {field.required && <span className="text-red-500">*</span>}
            </label>
            <textarea
              value={value}
              placeholder={field.placeholder}
              rows={field.rows || 3}
              onChange={(e) => handleInputChange(field.id, e.target.value, field)}
              className={baseInputClasses}
            />
            {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
          </div>
        );

      case 'select':
        return (
          <div key={field.id} className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {field.label} {field.required && <span className="text-red-500">*</span>}
            </label>
            <select
              value={value}
              onChange={(e) => handleInputChange(field.id, e.target.value, field)}
              className={baseInputClasses}
            >
              {field.options.map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
          </div>
        );

      case 'radio':
        return (
          <div key={field.id} className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              {field.label} {field.required && <span className="text-red-500">*</span>}
            </label>
            <div className="space-y-2">
              {field.options.map(option => (
                <label key={option.value} className="flex items-center">
                  <input
                    type="radio"
                    name={field.id}
                    value={option.value}
                    checked={value === option.value}
                    onChange={(e) => handleInputChange(field.id, e.target.value, field)}
                    className="mr-2"
                  />
                  {option.label}
                </label>
              ))}
            </div>
            {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
          </div>
        );

      case 'checkbox':
        return (
          <div key={field.id} className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              {field.label} {field.required && <span className="text-red-500">*</span>}
            </label>
            <div className="space-y-2">
              {field.options.map(option => (
                <label key={option.value} className="flex items-center">
                  <input
                    type="checkbox"
                    value={option.value}
                    checked={(formData[field.id] || []).includes(option.value)}
                    onChange={(e) => handleCheckboxChange(field.id, option.value, e.target.checked)}
                    className="mr-2"
                  />
                  {option.label}
                </label>
              ))}
            </div>
            {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
          </div>
        );

      default:
        return null;
    }
  };

  if (submitted) {
    return (
      <div className="max-w-2xl mx-auto p-6">
        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
          <h2 className="text-xl font-bold mb-2">Form Submitted Successfully!</h2>
          <p>Here's the data that was submitted:</p>
        </div>
        <div className="bg-gray-100 p-4 rounded">
          <pre className="text-sm overflow-auto">
            {JSON.stringify(formData, null, 2)}
          </pre>
        </div>
        <button
          onClick={() => {
            setSubmitted(false);
            setFormData({});
            setErrors({});
          }}
          className="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
        >
          Create New Form
        </button>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">Dynamic Form Generator</h1>
          <p className="text-gray-600">Generate forms dynamically from JSON configuration</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* JSON Configuration Panel */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
              <span className="bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm mr-2">1</span>
              JSON Configuration
            </h2>
            <div className="bg-gray-900 rounded-lg p-4 overflow-auto max-h-96">
              <pre className="text-green-400 text-xs">
{JSON.stringify(formConfig, null, 2)}
              </pre>
            </div>
            <div className="mt-4 p-3 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-800">
                <strong>💡 Tip:</strong> This JSON defines the form structure, validation rules, and field types. 
                You can modify this configuration to create different forms.
              </p>
            </div>
          </div>

          {/* Generated Form Panel */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
              <span className="bg-green-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm mr-2">2</span>
              Generated Form
            </h2>
            
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="text-center mb-6">
                <h3 className="text-lg font-medium text-gray-700">{formConfig.title}</h3>
              </div>

              {formConfig.fields.map(field => renderField(field))}

              <div className="pt-4 border-t">
                <button
                  type="submit"
                  className={`w-full px-4 py-3 rounded-lg font-medium transition-colors ${formConfig.submitButton.className}`}
                >
                  {formConfig.submitButton.text}
                </button>
              </div>
            </form>

            {/* Form Data Preview */}
            {Object.keys(formData).length > 0 && (
              <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                <h4 className="text-sm font-medium text-gray-700 mb-2">Live Form Data:</h4>
                <pre className="text-xs text-gray-600 overflow-auto max-h-32">
{JSON.stringify(formData, null, 2)}
                </pre>
              </div>
            )}
          </div>
        </div>

        {/* Features Section */}
        <div className="mt-12 bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold text-gray-800 mb-6 text-center">Supported Features</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="text-center p-4 bg-blue-50 rounded-lg">
              <div className="text-2xl mb-2">📝</div>
              <h3 className="font-medium text-gray-800">Input Types</h3>
              <p className="text-sm text-gray-600">Text, Email, Number, Textarea</p>
            </div>
            <div className="text-center p-4 bg-green-50 rounded-lg">
              <div className="text-2xl mb-2">☑️</div>
              <h3 className="font-medium text-gray-800">Selection</h3>
              <p className="text-sm text-gray-600">Select, Radio, Checkbox</p>
            </div>
            <div className="text-center p-4 bg-yellow-50 rounded-lg">
              <div className="text-2xl mb-2">✅</div>
              <h3 className="font-medium text-gray-800">Validation</h3>
              <p className="text-sm text-gray-600">Required, Length, Pattern</p>
            </div>
            <div className="text-center p-4 bg-purple-50 rounded-lg">
              <div className="text-2xl mb-2">⚡</div>
              <h3 className="font-medium text-gray-800">Dynamic</h3>
              <p className="text-sm text-gray-600">Real-time Updates</p>
            </div>
          </div>
        </div>

        {/* Code Example Section */}
        <div className="mt-8 bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">How to Use</h2>
          <div className="space-y-4">
            <div className="p-4 bg-gray-50 rounded-lg">
              <h3 className="font-medium text-gray-800 mb-2">1. Define JSON Configuration</h3>
              <code className="text-sm text-blue-600">
                const formConfig = {`{ title: "My Form", fields: [...] }`}
              </code>
            </div>
            <div className="p-4 bg-gray-50 rounded-lg">
              <h3 className="font-medium text-gray-800 mb-2">2. Pass to Component</h3>
              <code className="text-sm text-blue-600">
                {`<DynamicForm config={formConfig} onSubmit={handleSubmit} />`}
              </code>
            </div>
            <div className="p-4 bg-gray-50 rounded-lg">
              <h3 className="font-medium text-gray-800 mb-2">3. Handle Form Data</h3>
              <code className="text-sm text-blue-600">
                const handleSubmit = (data) => {`{ /* Process form data */ }`}
              </code>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DynamicFormGenerator;
